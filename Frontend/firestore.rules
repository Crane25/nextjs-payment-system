rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // NOTE: API Endpoints Access
    // Some collections allow read access without authentication
    // for API endpoints like /api/team/websites
    
    // Users collection - ปรับให้ใช้งานได้ใน production server
    match /users/{userId} {
      // อ่าน-เขียนข้อมูลตัวเองได้
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // ทุกคนที่ล็อกอินแล้วอ่านได้ (สำหรับระบบ)
      allow read: if request.auth != null;
      
      // สร้าง user ใหม่ได้เมื่อล็อกอิน (Rule 1: ปกติ)
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Production fallback - อนุญาตการสร้าง user ใหม่เมื่อมีข้อมูลครบถ้วน
      allow create: if request.resource.data.keys().hasAll(['username', 'email', 'role', 'createdAt']) &&
        request.resource.data.role == 'user' &&
        request.resource.data.username is string &&
        request.resource.data.email is string;
      
      // Emergency fallback - อนุญาตการสร้างเมื่อมีข้อมูลพื้นฐาน
      allow create: if request.resource.data.username is string &&
        request.resource.data.email is string;
      
      // Admin สามารถอ่าน-เขียนข้อมูลผู้ใช้คนอื่นได้
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Usernames collection - ปรับให้ใช้งานได้ใน production server
    match /usernames/{username} {
      // อ่านได้เพื่อตรวจสอบ username ซ้ำ (ไม่ต้องล็อกอิน)
      allow read: if true;
      
      // อนุญาตให้สร้างข้อมูล username ใหม่ได้ (Production-friendly)
      // Rule 1: ปกติ - มี Auth token และ uid ตรงกัน
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.uid;
      
      // Rule 2: Fallback สำหรับ production - ตรวจสอบข้อมูลครบถ้วน
      allow create: if request.resource.data.keys().hasAll(['uid', 'username', 'createdAt']) &&
        request.resource.data.username == username &&
        request.resource.data.uid is string &&
        request.resource.data.uid.size() > 0;
      
      // Rule 3: Emergency fallback - อนุญาตการสร้างเมื่อมีข้อมูลพื้นฐาน
      // ใช้เมื่อ Auth token มีปัญหาใน production
      allow create: if request.resource.data.uid is string &&
        request.resource.data.username is string &&
        request.resource.data.username == username;
      
      // อัพเดทและลบได้เมื่อล็อกอิน
      allow update, delete: if request.auth != null;
      
      // Admin override - admin สามารถจัดการข้อมูลได้
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Teams collection
    match /teams/{teamId} {
      // ทุกคนที่ล็อกอินแล้วอ่าน-เขียนได้
      allow read, write: if request.auth != null;
      
      // อนุญาตให้อ่านข้อมูลสำหรับ API endpoints (ไม่ต้องล็อกอิน)
      allow read: if true;
    }
    
    // Team Members collection
    match /teamMembers/{memberId} {
      // ทุกคนที่ล็อกอินแล้วอ่าน-เขียนได้
      allow read, write: if request.auth != null;
    }
    
    // Team-related collections
    match /teamInvitations/{invitationId} {
      allow read, write: if request.auth != null;
    }
    
    match /invitations/{invitationId} {
      allow read, write: if request.auth != null;
    }
    
    // Websites collection
    match /websites/{websiteId} {
      // ทุกคนที่ล็อกอินแล้วอ่าน-เขียนได้
      allow read, write: if request.auth != null;
      
      // อนุญาตให้อ่าน-เขียนข้อมูลสำหรับ API endpoints (ไม่ต้องล็อกอิน)
      // ใช้สำหรับ Team API การอัพเดทยอดเงิน
      allow read, write: if true;
    }
    
    // User websites subcollection
    match /users/{userId}/websites/{websiteId} {
      allow read, write: if request.auth != null;
    }
    
    // Topup History - ปลอดภัยและใช้งานได้
    match /topupHistory/{historyId} {
      // ทุกคนที่ล็อกอินแล้วอ่าน-เขียนได้
      allow read, write: if request.auth != null;
    }
    
    // Withdraw History - ปลอดภัยและใช้งานได้
    match /withdrawHistory/{historyId} {
      // ทุกคนที่ล็อกอินแล้วอ่าน-เขียนได้
      allow read, write: if request.auth != null;
    }
    
    // User history subcollections
    match /users/{userId}/topupHistory/{historyId} {
      allow read, write: if request.auth != null;
    }
    
    match /users/{userId}/withdrawHistory/{historyId} {
      allow read, write: if request.auth != null;
    }
    
    // System Logs
    match /systemLogs/{logId} {
      allow read, write: if request.auth != null;
    }
    
    // User profiles
    match /userProfiles/{userId} {
      // ทุกคนที่ล็อกอินแล้วอ่าน-เขียนได้
      allow read, write: if request.auth != null;
    }
    
    // Transactions collection - สำหรับ API endpoints
    match /transactions/{transactionId} {
      // ทุกคนที่ล็อกอินแล้วอ่าน-เขียนได้
      allow read, write: if request.auth != null;
      
      // อนุญาตให้อ่าน-เขียนข้อมูลสำหรับ API endpoints (ไม่ต้องล็อกอิน)
      // ใช้สำหรับ Team API การสร้าง transactions และอัปเดตสถานะ
      allow read, write: if true;
    }
    
    // Test collections
    match /__test__/{testId} {
      allow read, write: if true;
    }
    
    // สำหรับความปลอดภัย: collections อื่นๆ ที่ไม่ได้กำหนดจะถูกปฏิเสธ
  }
}