#!/bin/bash

# ===================================
# Complete System Reinstallation Script
# Next.js Payment System v2.0
# р╕ер╕Ър╣Бр╕ер╕░р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕лр╕бр╣Ир╕лр╕бр╕Фр╕Чр╕▒р╣Йр╕Зр╕гр╕░р╕Ър╕Ъ
# ===================================

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE} Complete System Reinstallation${NC}"
echo -e "${BLUE} Next.js Payment System v2.0${NC}"
echo -e "${BLUE}========================================${NC}"

print_warning "тЪая╕П р╕Др╕│р╣Ар╕Хр╕╖р╕нр╕Щ: р╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Щр╕╡р╣Йр╕Ир╕░р╕ер╕Ър╣Бр╕ер╕░р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕гр╕░р╕Ър╕Ър╣Гр╕лр╕бр╣Ир╕лр╕бр╕Фр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф!"
print_warning "тЪая╕П р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Ир╕░р╕Цр╕╣р╕Бр╕ер╕Ъ р╕гр╕зр╕бр╕Цр╕╢р╕З logs р╣Бр╕ер╕░ cache!"
echo ""
read -p "р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И? р╕Юр╕┤р╕бр╕Юр╣М 'YES' р╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г: " confirm

if [ "$confirm" != "YES" ]; then
    print_status "р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З"
    exit 0
fi

print_status "ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕лр╕бр╣Ир╕лр╕бр╕Фр╕Чр╕▒р╣Йр╕Зр╕гр╕░р╕Ър╕Ъ..."

# р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Чр╕╡р╣И 1: р╕лр╕вр╕╕р╕Фр╣Бр╕ер╕░р╕ер╕Ъ containers р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
print_status "1я╕ПтГг р╕лр╕вр╕╕р╕Фр╣Бр╕ер╕░р╕ер╕Ъ containers р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф..."
cd /var/www/scjsnext/deployment 2>/dev/null || cd $(pwd)

# р╕лр╕вр╕╕р╕Ф containers р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
docker compose down -v --remove-orphans 2>/dev/null || true
docker stop $(docker ps -aq) 2>/dev/null || true
docker rm $(docker ps -aq) 2>/dev/null || true

# р╕ер╕Ъ images р╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З
print_status "р╕ер╕Ъ Docker images..."
docker rmi $(docker images -q --filter "reference=*nextjs*") 2>/dev/null || true
docker rmi $(docker images -q --filter "reference=*nginx*") 2>/dev/null || true

# р╕ер╕Ъ volumes р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
print_status "р╕ер╕Ъ Docker volumes..."
docker volume rm $(docker volume ls -q) 2>/dev/null || true

# р╕ер╕Ъ networks р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ
print_status "р╕ер╕Ъ Docker networks..."
docker network rm payment-network 2>/dev/null || true
docker network prune -f 2>/dev/null || true

# р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф Docker system
print_status "р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф Docker system..."
docker system prune -af --volumes 2>/dev/null || true

print_status "тЬЕ р╕ер╕Ъ containers р╣Бр╕ер╕░ images р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ"

# р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Чр╕╡р╣И 2: р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч code р╕Ир╕▓р╕Б Git
print_status "2я╕ПтГг р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч code р╕Ир╕▓р╕Б Git..."
cd /var/www/scjsnext

# Backup .env.local р╕лр╕▓р╕Бр╕бр╕╡
if [ -f "Frontend/.env.local" ]; then
    print_status "р╕кр╕│р╕гр╕нр╕З .env.local file..."
    cp Frontend/.env.local /tmp/env.local.backup
    ENV_BACKUP_AVAILABLE=true
else
    ENV_BACKUP_AVAILABLE=false
fi

# Reset Git repository
print_status "р╕гр╕╡р╣Ар╕Лр╣Зр╕Х Git repository..."
git fetch origin
git reset --hard origin/main
git clean -fd

# р╕Др╕╖р╕Щр╕Др╣Ир╕▓ .env.local
if [ "$ENV_BACKUP_AVAILABLE" = true ]; then
    print_status "р╕Др╕╖р╕Щр╕Др╣Ир╕▓ .env.local file..."
    cp /tmp/env.local.backup Frontend/.env.local
    rm /tmp/env.local.backup
fi

print_status "тЬЕ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч code р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ"

# р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Чр╕╡р╣И 3: р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕гр╕░р╕Ър╕Ъ
print_status "3я╕ПтГг р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕гр╕░р╕Ър╕Ъ..."

# р╕ер╕Ър╣Др╕Яр╕ер╣М cache р╣Бр╕ер╕░ logs р╣Ар╕Бр╣Ир╕▓
print_status "р╕ер╕Ър╣Др╕Яр╕ер╣М cache р╣Бр╕ер╕░ logs р╣Ар╕Бр╣Ир╕▓..."
rm -rf deployment/nginx/logs/* 2>/dev/null || true
rm -rf deployment/logs/* 2>/dev/null || true
rm -rf Frontend/.next 2>/dev/null || true
rm -rf Frontend/node_modules 2>/dev/null || true

# р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
print_status "р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ..."
mkdir -p deployment/nginx/logs
mkdir -p deployment/logs
mkdir -p Frontend/logs

# р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ permissions
print_status "р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ file permissions..."
chmod +x deployment/*.sh
chown -R $USER:$USER /var/www/scjsnext
chown -R 1001:1001 deployment/logs/ 2>/dev/null || true

print_status "тЬЕ р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕гр╕░р╕Ър╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ"

# р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Чр╕╡р╣И 4: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ environment file
print_status "4я╕ПтГг р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ environment configuration..."

if [ ! -f "Frontend/.env.local" ]; then
    print_warning "р╣Др╕бр╣Ир╕Юр╕Ъ .env.local file р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕лр╕бр╣И..."
    
    cat > Frontend/.env.local << 'EOF'
# ===================================
# Production Environment Configuration
# Next.js Payment System v2.0
# ===================================

NODE_ENV=production
NEXT_PUBLIC_APP_ENV=production
NEXT_PUBLIC_APP_VERSION=2.0.0
NEXT_PUBLIC_DOMAIN=scjsnext.com

# Firebase Configuration
NEXT_PUBLIC_FIREBASE_API_KEY=AIzaSyAvEe6PF9mnwN8Vqf9wqWUkWA58coXKpiA
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=paymentnew-dae57.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=paymentnew-dae57
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=paymentnew-dae57.firebasestorage.app
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=1074850368558
NEXT_PUBLIC_FIREBASE_APP_ID=1:1074850368558:web:f7c3c3f162dfc8af1fa3bf

# Email Configuration
EMAIL_SERVER_USER=rachaelagani63028@gmail.com
EMAIL_SERVER_PASSWORD=24992499Kk
EMAIL_SERVER_HOST=smtp.gmail.com
EMAIL_SERVER_PORT=587
EMAIL_FROM=noreply@scjsnext.com

# Security Configuration (Production)
SESSION_SECRET=4a8f2e9c1b7d6e3f5a8b2c9d1e4f7a0b3c6d9e2f5a8b1c4d7e0f3a6b9c2e5f8a1b4d7e0f3a6b
CSRF_SECRET=9d2e5f8a1b4d7e0f3a6b9c2e5f8a1b4d7e0f3a6b9c2e5f8a1b4d7e0f3a6b9c2e5f8a1b4d7e0f
ENCRYPTION_KEY=06b259db817f41fbb73ac82a252a3b30
HASH_SALT=dae13683bf304cfb90c3c97b649131aa

# Security Settings
SECURITY_HEADERS_ENABLED=true
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_WINDOW_MS=900000
FORCE_HTTPS=false
SECURE_COOKIES=true
CLOUDFLARE_SSL=true

# Session Settings
SESSION_TIMEOUT_MS=3600000
HSTS_ENABLED=true
CSP_ENABLED=true
ENCRYPTION_ENABLED=true
AUDIT_LOG_ENABLED=true

# Debug Configuration (Production)
NEXT_PUBLIC_DEBUG_ENABLED=false
NEXT_PUBLIC_LOG_LEVEL=error
NEXT_PUBLIC_SHOW_ERROR_DETAILS=false
NEXT_PUBLIC_CONSOLE_LOGGING=false
NEXT_PUBLIC_PERFORMANCE_MONITORING=true

# Feature Flags
NEXT_PUBLIC_ENABLE_WITHDRAWALS=true
NEXT_PUBLIC_ENABLE_MULTI_TEAM=true
NEXT_PUBLIC_ENABLE_NOTIFICATIONS=true
NEXT_PUBLIC_ENABLE_ANALYTICS=true
NEXT_PUBLIC_MAINTENANCE_MODE=false
EOF
    
    print_status "тЬЕ р╕кр╕гр╣Йр╕▓р╕З .env.local file р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ"
else
    print_status "тЬЕ р╕Юр╕Ъ .env.local file р╣Бр╕ер╣Йр╕з"
fi

print_status "тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ environment р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ"

# р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Чр╕╡р╣И 5: р╕гр╕▒р╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕лр╕бр╣И
print_status "5я╕ПтГг р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕гр╕░р╕Ър╕Ър╣Гр╕лр╕бр╣И..."

cd deployment

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Docker Compose configuration
print_status "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Docker Compose configuration..."
if ! docker compose config -q; then
    print_error "Docker Compose configuration р╕бр╕╡р╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф!"
    exit 1
fi

print_status "тЬЕ Docker Compose configuration р╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З"

# р╕гр╕▒р╕Щ deployment script
print_status "р╕гр╕▒р╕Щ deployment script..."
echo ""
echo -e "${YELLOW}р╕Бр╕│р╕ер╕▒р╕Зр╕гр╕▒р╕Щ deploy.sh...${NC}"
echo ""

./deploy.sh

print_status "тЬЕ р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕гр╕░р╕Ър╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ"

# р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Чр╕╡р╣И 6: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в
print_status "6я╕ПтГг р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в..."

# р╕гр╕нр╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╕Юр╕гр╣Йр╕нр╕б
sleep 30

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ containers
print_status "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ container status..."
docker compose ps

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ health endpoints
print_status "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ health endpoints..."

# Test local health
if curl -f -s --max-time 5 "http://localhost/health" > /dev/null; then
    print_status "тЬЕ Nginx health: OK"
else
    print_warning "тЪая╕П Nginx health: Failed"
fi

if curl -f -s --max-time 5 "http://localhost:3000/api/health" > /dev/null; then
    print_status "тЬЕ Next.js health: OK"
else
    print_warning "тЪая╕П Next.js health: Failed"
fi

# Test external access
if curl -f -s --max-time 10 "https://scjsnext.com/health" > /dev/null; then
    print_status "тЬЕ External access via Cloudflare: OK"
else
    print_warning "тЪая╕П External access: Failed"
fi

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE} р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕лр╕бр╣Ир╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ! ${NC}"
echo -e "${BLUE}========================================${NC}"

print_status "ЁЯОЙ р╕гр╕░р╕Ър╕Ър╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕лр╕бр╣Ир╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з!"
echo ""
echo -e "${GREEN}ЁЯУЛ р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г:${NC}"
echo "   тЬЕ р╕ер╕Ъ containers р╣Бр╕ер╕░ images р╣Ар╕Бр╣Ир╕▓"
echo "   тЬЕ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч code р╕Ир╕▓р╕Б Git"
echo "   тЬЕ р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕гр╕░р╕Ър╕Ъ"
echo "   тЬЕ р╕кр╕гр╣Йр╕▓р╕З environment configuration"
echo "   тЬЕ р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕гр╕░р╕Ър╕Ър╣Гр╕лр╕бр╣Ир╕лр╕бр╕Ф"
echo "   тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ"
echo ""
echo -e "${GREEN}ЁЯМР р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З:${NC}"
echo "   - р╣Ар╕зр╣Зр╕Ър╣Др╕Лр╕Хр╣М: https://scjsnext.com"
echo "   - Health check: https://scjsnext.com/health"
echo ""
echo -e "${GREEN}ЁЯУК р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕г:${NC}"
echo "   - р╕Фр╕╣ logs: docker compose logs -f"
echo "   - р╕Фр╕╣р╕кр╕Цр╕▓р╕Щр╕░: docker compose ps"
echo "   - р╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч: docker compose restart"
echo ""
echo -e "${YELLOW}ЁЯУЭ р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕:${NC}"
echo "   - р╕гр╕░р╕Ър╕Ър╕нр╕▓р╕Ир╣Гр╕Кр╣Йр╣Ар╕зр╕ер╕▓ 2-3 р╕Щр╕▓р╕Чр╕╡р╣Гр╕Щр╕Бр╕▓р╕г warm up"
echo "   - Cloudflare cache р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕Зр╕гр╕н 5-10 р╕Щр╕▓р╕Чр╕╡"
echo "   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ browser console р╕кр╕│р╕лр╕гр╕▒р╕Ъ errors"
echo ""

print_status "ЁЯЪА р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕лр╕бр╣Ир╣Ар╕кр╕гр╣Зр╕Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М!"

# р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М summary
cat > reinstall-summary.txt << EOF
# System Reinstallation Summary
Date: $(date)
Script: reinstall.sh
Status: COMPLETED

## Actions Performed:
1. тЬЕ Removed all Docker containers, images, and volumes
2. тЬЕ Updated code from Git repository  
3. тЬЕ Cleaned up old cache and logs
4. тЬЕ Recreated environment configuration
5. тЬЕ Performed fresh installation
6. тЬЕ Verified system health

## Container Status:
$(docker compose ps)

## Health Check Results:
- Nginx: $(curl -f -s --max-time 5 "http://localhost/health" > /dev/null && echo "OK" || echo "Failed")
- Next.js: $(curl -f -s --max-time 5 "http://localhost:3000/api/health" > /dev/null && echo "OK" || echo "Failed")
- External: $(curl -f -s --max-time 10 "https://scjsnext.com/health" > /dev/null && echo "OK" || echo "Failed")

## Next Steps:
- Monitor logs: docker compose logs -f
- Test website: https://scjsnext.com
- Check performance and errors
EOF

print_status "ЁЯУД р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕зр╣Йр╣Гр╕Щр╣Др╕Яр╕ер╣М: reinstall-summary.txt"